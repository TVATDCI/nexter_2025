@use "../abstract" as vars;

.homes {
  grid-column: center-start / center-end;

  margin: 15rem 0; // margin: top-bottom / left-right

  display: grid;
  /* The same happens like in features section. 
    grid-template-columns: repeat(3, 1fr); change grid-template added with auto-fit and minmax to keep the text box to max at 250px when it's minimised for the responsive design!*/
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 7rem;
}

.home {
  background-color: vars.$color-grey-light-1;

  display: grid;
  grid-template-columns: repeat(2, 1fr);

  grid-row-gap: 3.5rem;

  &__img {
    width: 100%;
    grid-row: 1 / 2; // to reset the img back to to top row1/2 after being pushed down by the heart icon(like)
    grid-column: 1 / -1;
    z-index: 1; // set z-index to make sure it stays underneath of heart icon
  }

  &__like {
    grid-row: 1 / 2;
    grid-column: 2 / 3; // setting up heart icon independly(self-align) to the top of the img
    fill: vars.$color-primary;
    height: 2.5rem;
    width: 2.5rem;
    z-index: 2;
    justify-self: end; // to move the icon alone to th end of grid cell(flex end)
    margin: 1rem; // a bit of margin to position it away from the corner!
  }

  /* In the name section is an example of over-lapping layout technic*/
  &__name {
    grid-row: 1 / 2; // to defy grid row. basically, over-lapping the name on top img in the same cell!
    grid-column: 1 / -1;
    justify-self: center; // is to align item horizontally, in this case to the center
    align-self: end; // is to align item vertically, in this case to the bottom (end)
    z-index: 3;

    width: 80%;
    font-family: vars.$font-display;
    font-size: 1.6rem;
    text-align: center;
    padding: 1.25rem; // 1.25rem from all side!
    background-color: vars.$color-secondary;
    color: #fff;
    font-weight: 400;
    // The last part is to set transform to translateY: to move it down 50% from its height
    transform: translateY(50%);
  }

  &__location,
  &__rooms {
    margin-top: 2.5rem; // adding margin-top to the location&room boxes to create equal space below the img box!
  }

  &__location,
  &__rooms,
  &__area,
  &__price {
    font-size: 1.5rem;
    margin-left: 2rem;

    // Mixing flex in Grid, in this case, flex box is an easy way to align these items & icons in the center and straight line
    display: flex;
    align-items: center;

    svg {
      fill: vars.$color-primary;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem; // to create 10px(62.5%) gap (in flex) between icons & details
    }

    p {
    }
  }

  &__btn {
    grid-column: 1 / -1;
  }
}
