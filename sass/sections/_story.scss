@use "../abstract" as vars;
@use "../abstract/" as m;

.story {
  &__pictures {
    background-color: vars.$color-primary;
    grid-column: full-start / col-end 4;

    background-image: linear-gradient(
        rgba(vars.$color-primary, 0.5),
        rgba(vars.$color-primary, 0.5)
      ),
      url(../img/back.jpg); // Again using linear-gradient to add masking color-transparent to the bg-img for a smoother color theme. And watch out! you are in story.scss. You must select url with ../ (one folder above sass!
    background-size: cover;

    display: grid;
    grid-template-rows: repeat(
      6,
      1fr
    ); // using grid-template to divide story__pic into 6x1fr (100%/6fr)
    grid-template-columns: repeat(6, 1fr); // also with column = 6x6 grid cells

    align-items: center; // aligning both imgs to ceter of their cell or grid-column&row declared.
    @include m.respond(medium) {
      grid-column: 1 / -1;
      padding: 2rem;
    }
  }

  &__img--1 {
    width: 100%; // In this case, the width will be 100% once the grid cell is decleared!
    grid-row: 2 / 6; // once you use <img> not <div> in html the img will keep its aspect ratio. That means the
    grid-column: 2 / 6; // img with not be exxact(cell 2/6) how you declear them. IMG aspect ratioo is important! However, in this case, you want the img to be in the center of the picture container. It can simply solved by setting align-item: center (above)
    box-shadow: 0 2rem 5rem rgba($color: #000000, $alpha: 0.7);

    @include m.respond(medium) {
      grid-column: 1 / 5;
      grid-row: 1 / -1;
      opacity: 0.7;
    }
  }

  &__img--2 {
    width: 115%; // with 100% width(cell). with 115% the width streches 15% outside the cell.
    grid-row: 4 / 6;
    grid-column: 4 / 7;
    z-index: 20; // to make the 15% extra of the img, z-index must be set to higher above both containers!
    box-shadow: 0 2rem 5rem rgba($color: #000000, $alpha: 0.7);

    @include m.respond(medium) {
      grid-row: 1 / -1;

      width: 100%;
    }
  }
  /*above & below are set up as grid-items using sass style decoration, as block-element without a parent blocks to identify it as a part of story pic&content blocks!*/

  &__content {
    background-color: vars.$color-grey-light-1;
    grid-column: col-start 5 / full-end;

    padding: 6rem 8vw; // (L-R 8vw) is used for more flexibility of responsive design

    /* You can add flex into grid layout!
        display: flex;
        flex-direction: column;
        justify-content: center; // to keep all items at the center
        // The same case happens here like in features and icon. align-items here to keep all the flex-start. So the btn does not expand when the width is pulled around!
        
        align-items: flex-start; 
        
        HOWEVER, YOU CAN ALSO USE GRID IN THIS CASE, THIS IS A GRID LAYOUT PROJECT*/
    display: grid;
    align-content: center;
    // instead of using align-item: flex-start, but justify-items in grid
    justify-items: start;

    @include m.respond(medium) {
      grid-column: 1 / -1;
      grid-row: 5 / 6;
    }
  }

  &__text {
    font-size: 1.5rem;
    font-family: italic;
    margin-bottom: 4rem;
  }
}
